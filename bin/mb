#!/usr/bin/env python 
#
# Perform MAGeT brain segmentation 
#
#
# commands:
# start          -- do everything that needs doing
# register       -- do registrations
# vote           -- do voting (assuming everything else is done)
# pick_templates -- pick (randomly) from subjects to make template library
# check_setup    -- sanity checks on setup
# 
# options:
#  --batch            # which batch system to use: SGE, PBS, NONE, custom
#  --num_templates
#  --fake  -n         # dry run
#  --vote_method      # list of voting methods to use, e.g. maj,xcorr,STAPLE
#  --retries          # number of times to retry submitting commands to batch
#  --output_dir
#  --log_dir
#  --save_xfms
#  --processors
#  --invert_resample  
#  --registration_cmd 
#  --resample_cmd
#
# future commands:
#   build_model
#   morphometry
#   

from optparse import OptionParser
import glob
import os
import os.path

class Template:
    def __init__(self, image, labels = None):
        """Represents an MR image (labels, potentially)."""
        image_path      = os.path.realpath(image)
        self.stem       = os.path.basename(os.path.splitext(image_path)[0])
        self.image      = image
        self.labels     = labels

        expected_labels = os.path.join(dirname(dirname(image_path)), 'labels', self.stem + "_labels.mnc")
        if not labels and os.path.exists(expected_labels):
            self.labels = expected_labels 

def get_templates(path):
    """return a list of MR image Templates from the given path.  Expect to find
    a child folder named brains/ containing MR images, and labels/ containing
    corresponding labels."""
    return [Template(i) for i in glob.glob(os.path.join(path, 'brains', "*.mnc"))]


def queue():
    # queue template library registrations
    # queue voting 
    pass

if __name__ == '__main__':
    parser = OptionParser()
    parser.set_usage("%prog [options] <command>")        
    parser.add_option("--output_dir", dest="output_dir",
        default="output", type="string", 
        help="Path to output folder")
    parser.add_option("--registrations_dir", dest="registrations_dir",
        default="regisstrations", type="string", 
        help="Directory containing registrations from template library to subject.")
    parser.add_option("-n", dest="dry_run",
        default=False,
        action="store_true", 
        help="Dry run.")
    parser.add_option("--invert_resample", dest="invert_resample",
        action="store_true", default=False,
        help="Invert the transformations during resampling.")
    options, args = parser.parse_args()

    assert len(args) > 0, "Expects a command."
    command = args[0]

    output_dir        = os.path.abspath(options.output_dir)
    registrations_dir = os.path.join(output_dir, "registrations")

    if command == "register": 
        pass
    elif command == "start":
        pass
